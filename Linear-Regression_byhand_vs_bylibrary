import pandas as pd
import numpy as np

X=np.array(df.loc[:,['Intercept','Independent_Variable']])
y=np.array(df.loc[:,'Dependent_Variable'])

#Linear Regression Function Creation myself 
def linear_regression(X,y):
   _coeffs =np.matmul(np.matmul(np.linalg.inv(np.matmul(X.T, X)),X.T),y)
   return _coeffs
   
by_hand_coefs = linear_regression(X, y)

print('Intercept calculated by hand:', by_hand_coefs[0])
print('Slope calculated by hand: ', by_hand_coefs[1])

#Creating Random data and visualizing
xs=np.linspace(3,30,100)
ys=by_hand_coefs[0]+by_hand_coefs[1]*xs

import matplotlib.pyplot as plt
%matplotlib inline 

plt.figure(figsize=(8,8))
plt.plot(df['Independent_Variable'],df['Dependent_Variable'],'go',label='observations',alpha=0.8)
plt.xlabel("Independent_Variable",size=18);plt.ylabel("Dependent_Variable",size=18);
plt.plot(xs,ys,'r--',label='OLS Fit',linewidth=4,alpha=0.8)
plt.legend(prop={'size':10})
plt.title('Dependent_Variable Vs. Independent_Variable',size=20)

#Using Linear Regression Function from Library
from sklearn.linear_model import LinearRegression

lr=LinearRegression()
lr.fit(np.array(df.Duration).reshape(-1,1),y)

print('Intercept from library:', lr.intercept_)
print('Slope from library:', lr.coef_[0])
